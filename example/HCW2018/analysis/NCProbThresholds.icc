// -*- c++ -*- 
#include "ProbThresholds.icc"

std::vector<std::string> snames = { "topoclus", "topotowf", "topotow" };

std::map<std::string,boost::tuples::tuple<int,double,double> > bindescr;

bindescr[snames.at(0)] = boost::tuples::tuple<int,double,double>(26,-1.,51.); 
bindescr[snames.at(1)] = boost::tuples::tuple<int,double,double>(72,-5.,355.); 
bindescr[snames.at(2)] = boost::tuples::tuple<int,double,double>(48,-1.,95.); 

int nb(0); double xl(0.); double xh(0.);

std::string bds;
for ( auto nm : snames ) {
  if ( fname.find(nm) != std::string::npos ) { 
    nb = bindescr[nm].get<0>(); xl = bindescr[nm].get<1>(); xh = bindescr[nm].get<2>(); bds = nm; 
    break; 
  } 
 }

if ( nb == 0 ) { printf("Module[NCProbThresholds] - *PROBLEM* invalid binning, #bins = %i - fatal!\n",nb); return; }
printf("Module[NCProbThresholds] - *DONE* found binning descriptor <%s> nb = %3i xmin = %4.1f xmax = %4.1f\n",bds.c_str(),nb,xl,xh);

allHists.resize(lThresholds.size()-1,(TH1D*)0);
sigHists.resize(lThresholds.size()-1,(TH1D*)0);
bckHists.resize(lThresholds.size()-1,(TH1D*)0);

for ( size_t i(1); i<lThresholds.size(); ++i ) {
  std::string hname(TString::Format("h_var_all_%03.0f_%03.0f",std::max(std::abs(lThresholds.at(i-1)*100.),0.),std::min(std::abs(lThresholds.at(i)*100.),100.)).Data());
  std::string sname(TString::Format("h_var_sig_%03.0f_%03.0f",std::max(std::abs(lThresholds.at(i-1)*100.),0.),std::min(std::abs(lThresholds.at(i)*100.),100.)).Data());
  std::string bname(TString::Format("h_var_bck_%03.0f_%03.0f",std::max(std::abs(lThresholds.at(i-1)*100.),0.),std::min(std::abs(lThresholds.at(i)*100.),100.)).Data());
  allHists[i-1] = new TH1D(hname.c_str(),"variable",nb,xl,xh); allHists[i-1]->Sumw2();
  sigHists[i-1] = new TH1D(sname.c_str(),"variable",nb,xl,xh); sigHists[i-1]->Sumw2();
  bckHists[i-1] = new TH1D(bname.c_str(),"variable",nb,xl,xh); bckHists[i-1]->Sumw2();
 }

printf("Module[NCProbThresholds] - *DONE* histogram booking, list sizes %zu (all) %zu (signal) %zu (pile-up)\n",allHists.size(),sigHists.size(),bckHists.size());

for ( size_t i(0); i<allHists.size(); ++i ) {
  if ( allHists.at(i) != 0 ) { 
    allHists[i]->SetLineColor(hlColor.at(i)); allHists[i]->SetMarkerColor(hmColor.at(i)); allHists[i]->SetMarkerStyle(20); allHists[i]->SetMarkerSize(0.75);
    sigHists[i]->SetLineColor(hlColor.at(i)); sigHists[i]->SetMarkerColor(hmColor.at(i)); sigHists[i]->SetMarkerStyle(22); sigHists[i]->SetMarkerSize(0.75);
    bckHists[i]->SetLineColor(hlColor.at(i)); bckHists[i]->SetMarkerColor(hmColor.at(i)); bckHists[i]->SetMarkerStyle(23); bckHists[i]->SetMarkerSize(0.75);
  } else {
    printf("Module[NCProbThresholds] - *PROBLEM* index %2zu cannot allocate expected histogram for this index\n",i);
  }
}

printf("Module[NCProbThresholds] - *DONE* histogram styling\n");



