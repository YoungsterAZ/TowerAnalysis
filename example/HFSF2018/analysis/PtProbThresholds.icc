// -*- c++ -*- 
#ifndef CONTEXT_PLOTPROBRELS
#include "ProbThresholds.icc"
#endif

std::vector<double> v_ptbins;
v_ptbins.push_back(20.);
double lx(1.); double dlx(0.1); double dlw(1.0); double ptstep(250.); double ptsep(100.);
while ( v_ptbins.back() < 2000. ) { 
  double dpt(0.);
  if ( v_ptbins.back() < ptstep ) { 
    dpt = 10.*std::log10(lx); 
    while ( dpt < 1.0 ) { lx += dlx; dpt = 10.*std::log10(lx); }
    if ( v_ptbins.back() < ptsep ) { lx += dlx; } { lx += dlw; }
  } else {
    dpt = 500.;
  }
  v_ptbins.push_back(v_ptbins.back()+dpt); 
}

#ifndef PTPROBTHRESHOLDS_NOPRINT
for ( size_t i(1); i<v_ptbins.size(); ++i ) { 
  printf("Module[PtProbThresholds] = pT bin [%03zu/%3zu] (%8.3f,%8.3f)\n",i-1,v_ptbins.size(),v_ptbins.at(i-1),v_ptbins.at(i));
 }
#endif

double* a_ptbins = &v_ptbins[0]; 
int     n_ptbins(v_ptbins.size()-1);

#ifndef CONTEXT_PLOTPROBRELS
allHists.resize(lThresholds.size()-1,(TH1D*)0);
sigHists.resize(lThresholds.size()-1,(TH1D*)0);
bckHists.resize(lThresholds.size()-1,(TH1D*)0);

for ( size_t i(1); i<lThresholds.size(); ++i ) {
  std::string hname(TString::Format("h_var_all_%03.0f_%03.0f",std::max(std::abs(lThresholds.at(i-1)*100.),0.),std::min(std::abs(lThresholds.at(i)*100.),100.)).Data());
  std::string sname(TString::Format("h_var_sig_%03.0f_%03.0f",std::max(std::abs(lThresholds.at(i-1)*100.),0.),std::min(std::abs(lThresholds.at(i)*100.),100.)).Data());
  std::string bname(TString::Format("h_var_bck_%03.0f_%03.0f",std::max(std::abs(lThresholds.at(i-1)*100.),0.),std::min(std::abs(lThresholds.at(i)*100.),100.)).Data());
  allHists[i-1] = new TH1D(hname.c_str(),"variable",n_ptbins,a_ptbins); allHists[i-1]->Sumw2();
  sigHists[i-1] = new TH1D(sname.c_str(),"variable",n_ptbins,a_ptbins); sigHists[i-1]->Sumw2();
  bckHists[i-1] = new TH1D(bname.c_str(),"variable",n_ptbins,a_ptbins); bckHists[i-1]->Sumw2();
 }

printf("Module[ProbThresholds] - *DONE* histogram booking, list sizes %zu (all) %zu (signal) %zu (pile-up)\n",allHists.size(),sigHists.size(),bckHists.size());

for ( size_t i(0); i<allHists.size(); ++i ) {
  if ( allHists.at(i) != 0 ) { 
    allHists[i]->SetLineColor(hlColor.at(i)); allHists[i]->SetMarkerColor(hmColor.at(i)); allHists[i]->SetMarkerStyle(20); allHists[i]->SetMarkerSize(0.75);
    sigHists[i]->SetLineColor(hlColor.at(i)); sigHists[i]->SetMarkerColor(hmColor.at(i)); sigHists[i]->SetMarkerStyle(22); sigHists[i]->SetMarkerSize(0.75);
    bckHists[i]->SetLineColor(hlColor.at(i)); bckHists[i]->SetMarkerColor(hmColor.at(i)); bckHists[i]->SetMarkerStyle(23); bckHists[i]->SetMarkerSize(0.75);
  } else {
    printf("Module[ProbThresholds] - *PROBLEM* index %2zu cannot allocate expected histogram for this index\n",i);
  }
}

printf("Module[ProbThresholds] - *DONE* histogram styling\n");
#endif


